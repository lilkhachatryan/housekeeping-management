import React, { useState } from 'react';import { DragDropContext } from 'react-beautiful-dnd';import { Layout, Row, Col, Button } from 'antd';import { v4 as uuidv4 } from 'uuid';import HousekeeperColumn from './components/HousekeeperColumn';import UnassignedTasksPool from './components/UnassignedTasksPool';import AddTaskModal from './components/AddTaskModal';import mockTasks from "./data/mockTasks";import mockHousekeepers from "./data/mockHousekeepers";import './App.css';const { Header, Content } = Layout;function App() {    const [housekeepers, setHousekeepers] = useState(mockHousekeepers);    const [tasks, setTasks] = useState(mockTasks);    const [editingTask, setEditingTask] = useState(null);    const [isModalVisible, setIsModalVisible] = useState(false);    const updateTaskOrderNumbers = (tasks) => {        const sortedTasks = tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));        return sortedTasks.map((task, index) => ({            ...task,            title: `${index + 1} - ${task.title.split(" - ").slice(1).join(" - ")}`,        }));    };    const handleAddNewTaskClick = () => {        setEditingTask(null);        setIsModalVisible(true);    };    const handleEditTask = (task) => {        setEditingTask(task);        setIsModalVisible(true);    };    const handleDeleteTask = (taskId, housekeeperId = null) => {        if (housekeeperId) {            const newHousekeepers = housekeepers.map(housekeeper => {                if (housekeeper.id === housekeeperId) {                    const filteredTasks = housekeeper.tasks.filter(task => task.id !== taskId);                    return { ...housekeeper, tasks: updateTaskOrderNumbers(filteredTasks) };                }                return housekeeper;            });            setHousekeepers(newHousekeepers);        } else {            const filteredTasks = tasks.filter(task => task.id !== taskId);            setTasks(updateTaskOrderNumbers(filteredTasks));        }    };    const handleFormSubmit = (values) => {        if (editingTask) {            let taskUpdated = false;            // Update task in unassigned tasks            const updatedUnassignedTasks = tasks.map(task => {                if (task.id === editingTask.id) {                    taskUpdated = true;                    return {                        ...task,                        title: `${values.title.split(" - ")[0]} - ${values.title}`,                        duration: values.duration,                        deadline: values.deadline.format('YYYY-MM-DD HH:mm'),                        hotelApartment: values.hotelApartment                    };                }                return task;            });            // Update task in housekeepers' tasks            const updatedHousekeepers = housekeepers.map(housekeeper => {                const updatedTasks = housekeeper.tasks.map(task => {                    if (task.id === editingTask.id) {                        taskUpdated = true;                        return {                            ...task,                            title: `${values.title.split(" - ")[0]} - ${values.title}`,                            duration: values.duration,                            deadline: values.deadline.format('YYYY-MM-DD HH:mm'),                            hotelApartment: values.hotelApartment                        };                    }                    return task;                });                return {                    ...housekeeper,                    tasks: updateTaskOrderNumbers(updatedTasks)                };            });            if (taskUpdated) {                setHousekeepers(updatedHousekeepers);                if (!updatedHousekeepers.some(h => h.tasks.some(t => t.id === editingTask.id))) {                    setTasks(updateTaskOrderNumbers(updatedUnassignedTasks));                }            }        } else {            // Logic for adding a new task            const newTask = {                id: uuidv4(),                title: `${values.title.split(" - ")[0]} - ${values.title}`,                duration: values.duration,                deadline: values.deadline.format('YYYY-MM-DD HH:mm'),                hotelApartment: values.hotelApartment,            };            setTasks(updateTaskOrderNumbers([...tasks, newTask]));        }        setIsModalVisible(false);        setEditingTask(null);    };    const handleModalClose = () => {        setIsModalVisible(false);        setEditingTask(null);    };    const onDragEnd = (result) => {        const { source, destination } = result;        if (!destination) {            return;        }        const sourceId = source.droppableId;        const destinationId = destination.droppableId;        let newHousekeepers = [...housekeepers];        let newUnassignedTasks = [...tasks];        if (sourceId === destinationId) {            // Reordering within the same list            const isUnassignedTask = sourceId === 'unassignedTasksPool';            const taskList = isUnassignedTask ? newUnassignedTasks : newHousekeepers.find(h => `housekeeper-${h.id}` === sourceId).tasks;            const [reorderedItem] = taskList.splice(source.index, 1);            taskList.splice(destination.index, 0, reorderedItem);            if (!isUnassignedTask) {                newHousekeepers.find(h => `housekeeper-${h.id}` === sourceId).tasks = updateTaskOrderNumbers(taskList);            } else {                newUnassignedTasks = updateTaskOrderNumbers(taskList);            }        } else {            // Moving between different lists            const startTaskList = sourceId === 'unassignedTasksPool' ? newUnassignedTasks : newHousekeepers.find(h => `housekeeper-${h.id}` === sourceId).tasks;            const finishTaskList = destinationId === 'unassignedTasksPool' ? newUnassignedTasks : newHousekeepers.find(h => `housekeeper-${h.id}` === destinationId).tasks;            const [movedItem] = startTaskList.splice(source.index, 1);            finishTaskList.splice(destination.index, 0, movedItem);            if (sourceId !== 'unassignedTasksPool') {                newHousekeepers.find(h => `housekeeper-${h.id}` === sourceId).tasks = updateTaskOrderNumbers(startTaskList);            }            if (destinationId !== 'unassignedTasksPool') {                newHousekeepers.find(h => `housekeeper-${h.id}` === destinationId).tasks = updateTaskOrderNumbers(finishTaskList);            } else {                newUnassignedTasks = updateTaskOrderNumbers(finishTaskList);            }        }        setHousekeepers(newHousekeepers);        setTasks(newUnassignedTasks);    };    return (        <Layout>            <Header>                <Button type="primary" onClick={handleAddNewTaskClick}>                    Add New Task                </Button>                {isModalVisible && <AddTaskModal                    isModalVisible={isModalVisible}                    handleFormSubmit={handleFormSubmit}                    handleModalClose={handleModalClose}                    editingTask={editingTask}                />}            </Header>            <Content style={{ padding: '20px', height: '100vh' }}>                <DragDropContext onDragEnd={onDragEnd}>                    <Row gutter={16}>                        <Col span={6}>                            <UnassignedTasksPool                                tasks={tasks}                                handleDeleteTask={handleDeleteTask}                                handleEditTask={handleEditTask}                            />                        </Col>                        {housekeepers.map((housekeeper) => (                            <Col key={housekeeper.id} span={6}>                                <HousekeeperColumn                                    housekeeper={housekeeper}                                    handleDeleteTask={handleDeleteTask}                                    handleEditTask={handleEditTask}                                />                            </Col>                        ))}                    </Row>                </DragDropContext>            </Content>        </Layout>    );}export default App;